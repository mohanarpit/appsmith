name: Initiate Client Build

on:
  # This line enables manual triggering of this workflow.
  workflow_dispatch:

  push:
    branches: [release, master]
    # Only trigger if files have changed in this specific path
    # paths:
    #   - 'app/client/**'
    #   - '!app/client/cypress/manual_TestSuite/**'

  pull_request:
    branches: [release, master]
    # paths:
    #   - 'app/client/**'
    #   - '!app/client/cypress/manual_TestSuite/**'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/client
        shell: bash

    steps:

      - name: Checkout the merged commit from PR and base branch
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Checkout the head commit of the branch
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # - name: List the files
      #   run: |
      #     echo "Using toJSON function"
      #     echo "${{ toJson(github) }}"
          
      # Save the details of the PR/push event to a workflow folder
      - name: Save PR number and pass onto the build workflow
        run: |
          mkdir -p ./workflow-details
          # Save the PR number in a file
          echo ${{ github.event.number }} > ./workflow-details/pr-number
          # Save the reference
          echo ${{ github.ref }} > ./workflow-details/reference
          # Save the github event that triggered this flow
          echo ${{ github.event_name }} > ./workflow-details/event-name
          # Save the git SHA
          echo ${GITHUB_SHA} > ./workflow-details/git-sha

          # Since this is an unreleased build, we set the version to incremented version number with
          # a `-SNAPSHOT` suffix.
          latest_released_version="$(git tag --list 'v*' --sort=-version:refname | head -1)"
          echo "latest_released_version = $latest_released_version"
          next_version="$(echo "$latest_released_version" | awk -F. -v OFS=. '{ $NF++; print }')"
          echo "next_version = $next_version"
          echo $next_version-SNAPSHOT > ./workflow-details/next-version

      - name: Use Node.js 14.15.4
        uses: actions/setup-node@v1
        with:
          node-version: "14.15.4"
      
      - name: Get yarn cache directory path
        id: yarn-dep-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      # Retrieve npm dependencies from cache. After a successful run, these dependencies are cached again
      - name: Cache npm dependencies
        id: yarn-dep-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-yarn-dependencies
        with:
          path: ${{ steps.yarn-dep-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-dep-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-dep-
      
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-nodemodules-

      # Install all the dependencies
      - name: Install dependencies
        run: yarn install --prefer-offline

      - name: Set the build environment based on the branch
        id: vars
        run: |
          echo "::set-output name=REACT_APP_ENVIRONMENT::DEVELOPMENT"
          if [[ "${{github.ref}}" == "refs/heads/master" ]]; then
              echo "::set-output name=REACT_APP_ENVIRONMENT::PRODUCTION"
          fi
          if [[ "${{github.ref}}" == "refs/heads/release" ]]; then
              echo "::set-output name=REACT_APP_ENVIRONMENT::STAGING"
          fi
          # Since this is an unreleased build, we set the version to incremented version number with
          # a `-SNAPSHOT` suffix.
          latest_released_version="$(git tag --list 'v*' --sort=-version:refname | head -1)"
          echo "latest_released_version = $latest_released_version"
          next_version="$(echo "$latest_released_version" | awk -F. -v OFS=. '{ $NF++; print }')"
          echo "next_version = $next_version"
          echo ::set-output name=version::$next_version-SNAPSHOT

          git_sha=${{ github.event.workflow_run.head_sha }}
          echo ::set-output name=git_sha::$git_sha

      - name: Run the jest tests
        run: REACT_APP_ENVIRONMENT=${{steps.vars.outputs.REACT_APP_ENVIRONMENT}} yarn run test:unit

      - name: Setup Yarn build cache
        uses: actions/cache@v2
        id: yarn-build-cache
        with:
          path: ./build/
          key: ${{ runner.os }}-yarn-bcache-${{ hashFiles('src/') }}
          restore-keys: |
            ${{ runner.os }}-yarn-bcache

      # We burn React environment & the Segment analytics key into the build itself.
      # This is to ensure that we don't need to configure it in each installation
      # Also, since the build already exists, we don't need to build the code again
      - name: Create the bundle
        # if: steps.yarn-build-cache.outputs.cache-hit != 'true'
        run: |
          REACT_APP_ENVIRONMENT=${{steps.vars.outputs.REACT_APP_ENVIRONMENT}} \
          REACT_APP_FUSIONCHARTS_LICENSE_KEY=${{ secrets.APPSMITH_FUSIONCHARTS_LICENSE_KEY }} \
          REACT_APP_SEGMENT_CE_KEY=${{ secrets.APPSMITH_SEGMENT_CE_KEY }} \
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} \
          REACT_APP_VERSION_ID=${{ steps.vars.outputs.version }} \
          REACT_APP_VERSION_RELEASE_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ') \
          REACT_APP_SENTRY_RELEASE=${{ steps.vars.outputs.git_sha }}
          yarn build

      # Upload the build artifact so that it can be used by the test & deploy job in the workflow
      # - name: Upload react build bundle
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build
      #     path: app/client/build/

      # This folder will be downloaded by the build workflow in order to actually build, test and package the code
      - uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: workflow-package
          path: |  
            app/client/workflow-details/*
            app/client/build/*
            app/client/cypress/*
            app/client/docker/*
